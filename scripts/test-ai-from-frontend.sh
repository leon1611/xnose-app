#!/bin/bash

echo "üß™ PROBANDO AI SERVICE DESDE EL FRONTEND"
echo "========================================"

# Funci√≥n para verificar servicios
check_services() {
    echo "üîç Verificando servicios..."
    
    # Verificar AI Service
    if curl -s http://localhost:8000/health > /dev/null; then
        echo "‚úÖ AI Service: OK"
        AI_HEALTH=$(curl -s http://localhost:8000/health)
        echo "   - Mascotas registradas: $(echo $AI_HEALTH | python3 -c "import sys, json; print(json.load(sys.stdin)['total_pets_advanced'])")"
        echo "   - Umbral: $(echo $AI_HEALTH | python3 -c "import sys, json; print(json.load(sys.stdin)['threshold'])")"
    else
        echo "‚ùå AI Service: NO RESPONDE"
        return 1
    fi
    
    # Verificar Gateway
    if curl -s http://localhost:8080/actuator/health > /dev/null; then
        echo "‚úÖ Gateway Service: OK"
    else
        echo "‚ùå Gateway Service: NO RESPONDE"
        return 1
    fi
    
    # Verificar Pet Service
    if curl -s http://localhost:8083/actuator/health > /dev/null; then
        echo "‚úÖ Pet Service: OK"
    else
        echo "‚ùå Pet Service: NO RESPONDE"
        return 1
    fi
    
    return 0
}

# Funci√≥n para mostrar instrucciones de prueba
show_test_instructions() {
    echo ""
    echo "üì± INSTRUCCIONES PARA PROBAR DESDE EL FRONTEND"
    echo "=============================================="
    echo ""
    echo "1. üöÄ Iniciar el frontend:"
    echo "   cd frontend && npm start"
    echo ""
    echo "2. üì± Abrir en tu m√≥vil:"
    echo "   - Escanear el c√≥digo QR"
    echo "   - O usar: expo://192.168.0.104:19000"
    echo ""
    echo "3. üîê Iniciar sesi√≥n o registrar usuario"
    echo ""
    echo "4. üêï Registrar una nueva mascota:"
    echo "   - Ir a 'Mascotas'"
    echo "   - Tocar '+' para agregar"
    echo "   - Llenar datos b√°sicos"
    echo "   - Subir foto de perfil"
    echo "   - Subir foto de nariz (IMPORTANTE)"
    echo "   - Guardar"
    echo ""
    echo "5. üîç Probar esc√°ner:"
    echo "   - Ir a 'Esc√°ner'"
    echo "   - Tomar foto de nariz de la misma mascota"
    echo "   - Verificar que detecte la coincidencia"
    echo ""
    echo "6. üß™ Probar con diferentes condiciones:"
    echo "   - Diferentes √°ngulos de la nariz"
    echo "   - Diferente iluminaci√≥n"
    echo "   - Diferente distancia"
    echo ""
    echo "7. üìä Verificar resultados:"
    echo "   - Debe mostrar nombre de la mascota"
    echo "   - Debe mostrar confianza alta (>80%)"
    echo "   - Debe funcionar con la misma mascota"
    echo ""
}

# Funci√≥n para probar endpoints directamente
test_endpoints() {
    echo ""
    echo "üîó PROBANDO ENDPOINTS DIRECTAMENTE"
    echo "================================="
    
    # Probar health del AI Service
    echo "üìä AI Service Health:"
    curl -s http://localhost:8000/health | python3 -m json.tool
    
    # Probar estad√≠sticas del modelo
    echo ""
    echo "üìà Modelo Stats:"
    curl -s http://localhost:8000/model-stats | python3 -m json.tool
    
    # Probar gateway health
    echo ""
    echo "üåê Gateway Health:"
    curl -s http://localhost:8080/actuator/health | python3 -m json.tool
}

# Funci√≥n para mostrar configuraci√≥n actual
show_configuration() {
    echo ""
    echo "‚öôÔ∏è CONFIGURACI√ìN ACTUAL"
    echo "======================="
    
    # Obtener configuraci√≥n del AI Service
    AI_CONFIG=$(curl -s http://localhost:8000/health)
    
    echo "ü§ñ AI Service:"
    echo "   - Puerto: 8000"
    echo "   - Umbral: $(echo $AI_CONFIG | python3 -c "import sys, json; print(json.load(sys.stdin)['threshold'])")"
    echo "   - Confidence Boost: $(echo $AI_CONFIG | python3 -c "import sys, json; print(json.load(sys.stdin)['confidence_boost'])")"
    echo "   - Modelos: $(echo $AI_CONFIG | python3 -c "import sys, json; print(', '.join(json.load(sys.stdin)['available_models']))")"
    echo "   - Mascotas registradas: $(echo $AI_CONFIG | python3 -c "import sys, json; print(json.load(sys.stdin)['total_pets_advanced'])")"
    
    echo ""
    echo "üåê Gateway:"
    echo "   - Puerto: 8080"
    echo "   - Estado: $(curl -s http://localhost:8080/actuator/health | python3 -c "import sys, json; print(json.load(sys.stdin)['status'])")"
    
    echo ""
    echo "üêï Pet Service:"
    echo "   - Puerto: 8083"
    echo "   - Estado: $(curl -s http://localhost:8083/actuator/health | python3 -c "import sys, json; print(json.load(sys.stdin)['status'])")"
    
    echo ""
    echo "üì± Frontend:"
    echo "   - Puerto: 19000"
    echo "   - IP: 192.168.0.104"
    echo "   - URL: expo://192.168.0.104:19000"
}

# Funci√≥n para mostrar logs en tiempo real
show_logs() {
    echo ""
    echo "üìã MONITOREO DE LOGS"
    echo "==================="
    echo "Presiona Ctrl+C para salir del monitoreo"
    echo ""
    
    # Mostrar logs del AI Service
    if [ -f "ai-service/ai_service.log" ]; then
        echo "ü§ñ AI Service Logs:"
        tail -f ai-service/ai_service.log &
        AI_LOG_PID=$!
    fi
    
    # Mostrar logs del Gateway
    if [ -f "gateway-service/logs/app.log" ]; then
        echo "üåê Gateway Logs:"
        tail -f gateway-service/logs/app.log &
        GATEWAY_LOG_PID=$!
    fi
    
    # Esperar interrupci√≥n
    trap "kill $AI_LOG_PID $GATEWAY_LOG_PID 2>/dev/null; exit" INT
    wait
}

# Funci√≥n principal
main() {
    echo "üïê $(date)"
    echo ""
    
    # Verificar servicios
    if ! check_services; then
        echo "‚ùå Algunos servicios no est√°n disponibles"
        echo "   Ejecuta: ./scripts/restart-services.sh"
        exit 1
    fi
    
    # Mostrar configuraci√≥n
    show_configuration
    
    # Probar endpoints
    test_endpoints
    
    # Mostrar instrucciones
    show_test_instructions
    
    # Preguntar si quiere monitorear logs
    echo ""
    read -p "¬øQuieres monitorear logs en tiempo real? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        show_logs
    fi
}

# Ejecutar funci√≥n principal
main 