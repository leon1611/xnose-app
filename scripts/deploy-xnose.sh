#!/bin/bash

echo "üöÄ DESPLIEGUE COMPLETO DE X-NOSE EN RENDER"
echo "=========================================="
echo ""

# Funci√≥n para mostrar men√∫
show_menu() {
    echo "üìã Selecciona una opci√≥n:"
    echo ""
    echo "1. üîç Obtener informaci√≥n necesaria para Render"
    echo "2. üîß Configurar Google Cloud Storage"
    echo "3. üê≥ Probar Docker localmente"
    echo "4. üöÄ Configurar Render autom√°ticamente"
    echo "5. üì§ Subir c√≥digo a GitHub"
    echo "6. ‚úÖ Verificar despliegue"
    echo "7. üìö Ver documentaci√≥n"
    echo "8. ‚ùå Salir"
    echo ""
}

# Funci√≥n para verificar prerequisitos
check_prerequisites() {
    echo "üîç Verificando prerequisitos..."
    echo ""
    
    local missing=0
    
    # Verificar git
    if ! command -v git &> /dev/null; then
        echo "‚ùå Git no est√° instalado"
        missing=1
    else
        echo "‚úÖ Git est√° instalado"
    fi
    
    # Verificar curl
    if ! command -v curl &> /dev/null; then
        echo "‚ùå curl no est√° instalado"
        missing=1
    else
        echo "‚úÖ curl est√° instalado"
    fi
    
    # Verificar jq
    if ! command -v jq &> /dev/null; then
        echo "‚ùå jq no est√° instalado (inst√°lalo con: brew install jq)"
        missing=1
    else
        echo "‚úÖ jq est√° instalado"
    fi
    
    # Verificar Docker
    if ! command -v docker &> /dev/null; then
        echo "‚ùå Docker no est√° instalado"
        missing=1
    else
        echo "‚úÖ Docker est√° instalado"
    fi
    
    # Verificar Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        echo "‚ùå Docker Compose no est√° instalado"
        missing=1
    else
        echo "‚úÖ Docker Compose est√° instalado"
    fi
    
    if [ $missing -eq 1 ]; then
        echo ""
        echo "‚ö†Ô∏è Faltan algunos prerequisitos. Inst√°lalos antes de continuar."
        return 1
    fi
    
    echo ""
    echo "‚úÖ Todos los prerequisitos est√°n instalados"
    return 0
}

# Funci√≥n para verificar configuraci√≥n de git
check_git_config() {
    echo "üîç Verificando configuraci√≥n de Git..."
    
    if ! git config --get user.name &> /dev/null; then
        echo "‚ùå Git no est√° configurado"
        echo "   Configura tu usuario:"
        echo "   git config --global user.name 'Tu Nombre'"
        echo "   git config --global user.email 'tu@email.com'"
        return 1
    fi
    
    if ! git config --get user.email &> /dev/null; then
        echo "‚ùå Email de Git no est√° configurado"
        echo "   Configura tu email:"
        echo "   git config --global user.email 'tu@email.com'"
        return 1
    fi
    
    echo "‚úÖ Git est√° configurado correctamente"
    return 0
}

# Funci√≥n para probar Docker localmente
test_docker() {
    echo "üê≥ Probando Docker localmente..."
    echo ""
    
    echo "üîß Construyendo im√°genes..."
    if docker-compose build; then
        echo "‚úÖ Im√°genes construidas correctamente"
    else
        echo "‚ùå Error construyendo im√°genes"
        return 1
    fi
    
    echo ""
    echo "üöÄ Iniciando servicios..."
    if docker-compose up -d; then
        echo "‚úÖ Servicios iniciados"
        echo ""
        echo "‚è≥ Esperando a que los servicios est√©n listos..."
        sleep 30
        
        echo ""
        echo "üîç Verificando servicios..."
        if curl -f http://localhost:8080/actuator/health &> /dev/null; then
            echo "‚úÖ Gateway Service est√° funcionando"
        else
            echo "‚ùå Gateway Service no responde"
        fi
        
        if curl -f http://localhost:8000/health &> /dev/null; then
            echo "‚úÖ AI Service est√° funcionando"
        else
            echo "‚ùå AI Service no responde"
        fi
        
        if curl -f http://localhost:80/health &> /dev/null; then
            echo "‚úÖ Frontend est√° funcionando"
        else
            echo "‚ùå Frontend no responde"
        fi
        
        echo ""
        echo "üåê URLs de acceso local:"
        echo "   Frontend: http://localhost:80"
        echo "   Gateway: http://localhost:8080"
        echo "   AI Service: http://localhost:8000"
        echo ""
        echo "üõë Para detener los servicios: docker-compose down"
        
    else
        echo "‚ùå Error iniciando servicios"
        return 1
    fi
}

# Funci√≥n para subir c√≥digo a GitHub
push_to_github() {
    echo "üì§ Subiendo c√≥digo a GitHub..."
    echo ""
    
    # Verificar si hay cambios sin commitear
    if ! git diff-index --quiet HEAD --; then
        echo "üìù Hay cambios sin commitear. Creando commit..."
        git add .
        git commit -m "Deploy: $(date '+%Y-%m-%d %H:%M:%S') - Configuraci√≥n Docker para Render"
    fi
    
    # Verificar si el repositorio remoto est√° configurado
    if ! git remote get-url origin &> /dev/null; then
        echo "‚ùå No hay repositorio remoto configurado."
        echo "üìã Configura el repositorio remoto:"
        echo "   git remote add origin https://github.com/tu-usuario/xnose.git"
        return 1
    fi
    
    # Hacer push
    echo "üì§ Haciendo push al repositorio..."
    if git push origin main; then
        echo "‚úÖ C√≥digo subido exitosamente"
        return 0
    else
        echo "‚ùå Error subiendo c√≥digo"
        return 1
    fi
}

# Funci√≥n principal
main() {
    echo "üéØ Bienvenido al despliegue de X-NOSE"
    echo ""
    
    # Verificar prerequisitos
    if ! check_prerequisites; then
        echo ""
        echo "‚ùå No se pueden cumplir los prerequisitos. Instala las herramientas necesarias."
        exit 1
    fi
    
    # Verificar configuraci√≥n de git
    if ! check_git_config; then
        echo ""
        echo "‚ùå Git no est√° configurado correctamente."
        exit 1
    fi
    
    echo ""
    
    while true; do
        show_menu
        read -p "Selecciona una opci√≥n (1-8): " choice
        
        case $choice in
            1)
                echo ""
                ./scripts/get-render-info.sh
                ;;
            2)
                echo ""
                ./scripts/setup-google-cloud.sh
                ;;
            3)
                echo ""
                test_docker
                ;;
            4)
                echo ""
                ./scripts/setup-render.sh
                ;;
            5)
                echo ""
                push_to_github
                ;;
            6)
                echo ""
                ./scripts/verify-deployment.sh
                ;;
            7)
                echo ""
                echo "üìö DOCUMENTACI√ìN DISPONIBLE:"
                echo "   - DEPLOYMENT.md - Gu√≠a completa de despliegue"
                echo "   - README.md - Documentaci√≥n general del proyecto"
                echo "   - MANUAL_USUARIO_XNOSE.txt - Manual de usuario"
                echo "   - render.yaml - Configuraci√≥n de servicios en Render"
                echo "   - docker-compose.yml - Configuraci√≥n local con Docker"
                echo ""
                echo "üìñ Para ver la documentaci√≥n:"
                echo "   cat DEPLOYMENT.md"
                echo "   cat README.md"
                ;;
            8)
                echo ""
                echo "üëã ¬°Hasta luego!"
                exit 0
                ;;
            *)
                echo ""
                echo "‚ùå Opci√≥n inv√°lida. Selecciona un n√∫mero del 1 al 8."
                ;;
        esac
        
        echo ""
        read -p "Presiona Enter para continuar..."
        echo ""
    done
}

# Ejecutar funci√≥n principal
main 